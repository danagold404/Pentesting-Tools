class Directory:

    def __init__(self, path:list, size:int, httpCode:int , redirectPath:str):
        self.path = path # list of url components
        self.name = self.path[-1] # the name of the actuall resource the path points to
        self.subdirs = [] # alphabetically sorted list of Directory objects that are in this object's subdirectory
        self.size = size # size of the page (int)
        self.httpCode = httpCode # http code returned when accessing the page (int)
        self.redirectPath = redirectPath # string of the path redirected to
    
    
    def __lt__(self, other):
        """
        Custom comparison method to enable sorting of Directory instances.
        """
        return self.name < other.name
    
    def add_subdir(self, subdir):
        """
        Input: Directory object representing a subdirectory
        DO: add subdir to the list of subdirs of the current Dir object
        """
        self.subdirs.append(subdir)
        self.subdirs.sort()
    
    def add_subdir_by_name(self, subdirName:str):
        """
        Input: name of a subdirectory
        DO: create a Directory object with the given name and add it to the subdirs list (while keeping it sorted) 
        Output: the new subdir
        """
        new_path = self.path + [subdirName]
        newSubdir = Directory(new_path, -1, -1, "")
        self.subdirs.append(newSubdir)
        self.subdirs.sort()
        return newSubdir

    def search_subdir_by_name(self, subdir_name:str):
        """
        Input: string representing the name of a directory
        Output: If this Dir's subdirs lust contains a subdir with this name - returns it. Otherwise, returns None.
        """
        found = None

        for subdir in self.subdirs:
            if subdir.name == subdir_name:
                found = subdir
        
        return found

    def to_string(self):
        """ 
        Returns a string representing the current Directory object and its subdirs
        """
        indents = len(self.path)-1

        string = "  "*indents*2 + f"|-- {self.name} [{self.httpCode}] (size: {self.size})"

        if self.httpCode == 302:
            string += (f" --> {self.redirectPath}")

        for subdir in self.subdirs:
            string += "\n"+subdir.to_string()

        return string
    
class DirTree:

    def __init__(self, target:str):
        self.root: Directory = Directory([target], -1, 200, "")

    def insert(self, new_dir:Directory):
        if len(new_dir.path) >= 2:
            currDir = self.root

            for i in range (0,len(new_dir.path)-2):
                subdirName = new_dir.path[i+1]
                subdir = currDir.search_subdir_by_name(subdirName)

                if subdir is not None:
                    currDir = subdir
                else:
                    currDir = currDir.add_subdir_by_name(subdirName)

            currDir.add_subdir(new_dir)


    def to_string(self):
        return self.root.to_string()    
