from directory_module import Directory, DirTree
from urllib.parse import urlparse
import os

# Checks if a file with the same name as the outpur file exists in the working dir. If so - deletes it.
# Creates a new file that will contain the script's output
def create_output_file(outputPath:str):
    if os.path.exists(outputPath):
        os.remove(outputPath)
        print(f"File {outputPath} already exists. Deleting existing file.")

    with open(outputPath, 'w'):
        print(f"Created a new file: {outputPath}")

# Creates a list of the components of the given url
def extract_url_components(url:str):
    # Parse the URL
    parsed_url = urlparse(url)

    # Get the components from the parsed URL
    components = []
    
    # Add netloc to components if it is not empty
    if parsed_url.netloc:
        components.append(parsed_url.netloc)

    # Add other parts of the path
    components.extend(part for part in parsed_url.path.strip("/").split("/") if part)
    
    return components

# Extracts the url components, size, http code and redirect url from a given entry
def get_properties(entry:list):
    # Extracts url components
    url_line = entry[1]
    url = url_line.split('|')[-1].strip()
    url_list = extract_url_components(url)
    
    # Extracts status code
    status_line = entry[0]
    status_code = int(status_line.split(',')[0].split(':')[-1].strip())

    # Extracts size
    size_line = entry[0]
    size = size_line.split(',')[1].split(':')[-1].strip()

    # Extracts redirect url
    redirect = ""
    if status_code == 302:
        redirect_line = entry[2]
        redirect = redirect_line.split('|')[-1].strip()
    
    return url_list,status_code,size,redirect

# Reads line by line in the file, distiguishes entries, and adds all found subdirectories to the dir tree
def create_dir_tree(inputPath:str, tree:DirTree):
    with open(inputPath, 'r') as file:
        entry = []

        for line in file:
            # Getting to an empty line means we just finished reading a full entry
            if line.strip() == '':
                entry_string = "".join(entry)
                url_list,code,size,redirect = get_properties(entry)
                directory = Directory(url_list, size, code, redirect)
                tree.insert(directory)
                entry = []
            else:
                entry.append(line)
        
        # The file didn't end on an empty list so the last entry need to be processed
        if len(entry) > 0:
            url_list,code,size,redirect = get_properties(entry)
            directory = Directory(url_list, size, code, redirect)
            tree.insert(directory)

def write_tree(tree_string:str, treePath:str):
    with open(treePath,'w') as file:
        file.write(tree_string)

def main():
    inputPath = '/home/dana404/Documents/Projects/23andme/ffuf-wp.txt' #change this to match the location of the ffuf output file
    target = "target.com" #change this to the target domain

    treePath = '/home/dana404/Documents/Projects/23andme/dirTree.txt' #change this path to the location that will contain a tree representation of the target's directory

    # Creates a tree representation of the directory
    tree = DirTree(target)
    create_dir_tree(inputPath, tree)

    # Turns the tree into a string
    tree_string = tree.to_string()

    # Writes the string to the output file
    write_tree(tree_string, treePath)

if __name__ == "__main__":
    main()
